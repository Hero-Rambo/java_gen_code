<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<#assign className = table.className>
<#assign tableName = table.sqlName>
<#assign classNameLower = className?uncap_first>
<#list table.columns as c>
    <#if  c.pk  >
        <#assign pkColumn = c.columnNameLower >
        <#assign pkSqlName = c.sqlName >
        <#assign pkColumnJavaType = c.javaType >
    </#if>
</#list>

<mapper namespace="${basepackage}.mapper.${className}DAO">
    <!--<cache type="com.yyw.yhyc.cache.LoggingRedisCache"-->
           <!--flushInterval="86400000" size="1024000">-->
    <!--</cache>-->
    <resultMap id="BaseResultMap" type="${basepackage}.model.${className}">
        <#list table.columns as column>
        <result column="${column.sqlName}" property="${column.columnNameLower}"/>
        </#list>
    </resultMap>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${r'${'}criterion.condition${r'}'}
                            </when>
                            <when test="criterion.singleValue">
                                and ${r'${'}criterion.condition${r'}'} ${r'#{'}criterion.value${r'}'}
                            </when>
                             <when test="criterion.betweenValue">
                                and ${r'${'}criterion.condition${r'}'} ${r'#{'}criterion.value${r'}'} and ${r'#{'}criterion.secondValue${r'}'}
                            </when>
                            <when test="criterion.listValue">
                                and ${r'${'}criterion.condition${r'}'}
                                <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                  ${r'#{'}listItem${r'}'}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${r'${'}criterion.condition${r'}'}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${r'${'}criterion.condition${r'}'}  ${r'#{'}criterion.value${r'}'}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${r'${'}criterion.condition${r'}'}  ${r'#{'}criterion.value${r'}'} and  ${r'#{'}criterion.secondValue${r'}'}
                                </when>
                                <when test="criterion.listValue">
                                    and ${r'${'}criterion.condition${r'}'}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        ${r'#{'}listItem${r'}'}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Base_Column_List">
    <#list table.columns as column>
        ${column.sqlName}<#if column_has_next>,</#if>
    </#list>
    </sql>

    <sql id="commonColumnsNotPK">
    <#list table.columns as column>
      <#if !column.pk>
          ${column.sqlName}<#if column_has_next>,</#if>
      </#if>
    </#list>
    </sql>

    <select id="selectByExample" parameterType="${basepackage}.model.${className}Example" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List" />
        from ${tableName}
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${r'${'}orderByClause${r'}'}
        </if>
        <if test="limit != null">
            <if test="offset != null">
                limit ${r'${'}offset${r'}'}, ${r'${'}limit${r'}'}
            </if>
            <if test="offset == null">
                limit ${r'${'}limit${r'}'}
            </if>
        </if>
        <if test="forUpdate != null and forUpdate == true">
            for update
        </if>
    </select>

    <select id="selectByPrimaryKey" parameterType="${pkColumnJavaType}" resultMap="BaseResultMap">
        select
          <include refid="Base_Column_List" />
        from ${tableName}
        where ${pkSqlName} = ${r'#{'}${pkColumn}${r'}'}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="${pkColumnJavaType}">
        delete from ${tableName}
        where ${pkSqlName} =  ${r'#{'}${pkColumn}${r'}'}
    </delete>

    <delete id="deleteByExample" parameterType="${basepackage}.model.${className}Example">
        delete from ${tableName}
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </delete>

    <insert id="insert" parameterType="${basepackage}.model.${className}" useGeneratedKeys="true" keyProperty="${pkColumn}" keyColumn="${pkSqlName}">
        insert into ${tableName} (
          <include refid="commonColumnsNotPK" />
        )
        values (
        <#list table.columns as column>
          <#if !column.pk>
               ${r"#{" + column.columnNameLower + r"}"}<#if column_has_next>,</#if>
           </#if>
        </#list>
        )
    </insert>

    <insert id="insertSelective" parameterType="${basepackage}.model.${className}" useGeneratedKeys="true" keyProperty="${pkColumn}" keyColumn="${pkSqlName}">
        insert into  ${tableName}
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <#list table.columns as column>
            <if test="${column.columnNameLower} != null">
                ${column.sqlName} <#if column_has_next>,</#if>
            </if>
            </#list>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <#list table.columns as column>
            <if test="${column.columnNameLower} != null">
                ${r'#{'}${column.columnNameLower}${r'}'} <#if column_has_next>,</#if>
            </if>
            </#list>
        </trim>
    </insert>

    <select id="countByExample" parameterType="${basepackage}.model.${className}Example" resultType="java.lang.Long">
        select count(*) from  ${tableName}
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </select>

    <update id="updateByExampleSelective" parameterType="map">
        update  ${tableName}
        <set>
        <#list table.columns as column>
            <if test="record.${column.columnNameLower} != null">
                ${column.sqlName} = ${r'#{'}record.${column.columnNameLower}${'}'}<#if column_has_next>,</#if>
            </if>
        </#list>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByExample" parameterType="map">
        update sys_user
        set ${pkSqlName} = ${r'#{'}record.${pkColumn}${r'}'}
      <#list table.columns as column>
        <#if !column.pk>
            ,${column.sqlName} = ${r'#{'}record.${column.columnNameLower}${r'}'}
          </#if>
        </#list>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="${basepackage}.model.${className}">
        update sys_user
        <set>
            <#list table.columns as column>
                <#if !column.pk>
                    <if test="${column.columnNameLower} != null">
                        ${column.sqlName} = ${r'#{'}${column.columnNameLower}${r'}'}<#if column_has_next>,</#if>
                    </if>
                </#if>
            </#list>
        </set>
        where ${pkSqlName} = ${r'#{'}${pkColumn}${r'}'}
    </update>

    <update id="updateByPrimaryKey" parameterType="${basepackage}.model.${className}">
        update sys_user
        set
        <#list table.columns as column>
            <#if !column.pk>
                ${column.sqlName} = ${r'#{'}${column.columnNameLower}${r'}'}<#if column_has_next>,</#if>
            </#if>
        </#list>
        where ${pkSqlName} = ${r'#{'}${pkColumn}${r'}'}
    </update>
</mapper>